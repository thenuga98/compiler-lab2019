want -> other* a (other|a)* e (other|e)* i (other|i)* o (other|o)* u (other|u)*
other -> [bcdfghjklmnpqrstvwxyz]

want -> (FE*G|(aa)*b)(E|FE*G)
E -> b(aa)*b
F -> a(aa)*b
G -> b(aa)*ab|a
F -> ba(aa)*b

keyword "if"|"then"|"else"|"for"|"while"|"int"|"float"|"real"
relop "<"|"<="|">"|">="|"<>"|"="
splchar [!|@|#|$|%|^|&|*|(|)]
punc [\'|\"|;|{|}|:]
lower [a-z]
upper [A-Z]
digit [0-9]
%{
int nchar=0, nword=0, nline=0, nkeyword=0, nrelop=0, nsplchar=0, nupper=0, nlower=0;
%}
%%
\n {nline++; nchar++;}
{keyword} {nkeyword++; nlower+= yyleng; nword++; nchar+=yyleng;}
{relop} {nrelop++; nchar+=yyleng;}
{splchar} {nsplchar++; nchar+=yyleng;}
{punc} {nchar++;}
{upper}+ {nupper+=yyleng; nchar+=yyleng;}
{lower}+ {nlower+=yyleng; nchar+=yyleng;}
{digit}+ {nword++; nchar+=yyleng;}
[\t ' '] {nword++; nchar+=yyleng;}
%%
int main(void)
{
yylex();
printf("No. of characters: %d\n",nchar);
printf("No. of words: %d\n",nword);
printf("No. of lines: %d\n",nline);
printf("No. of keywords: %d\n",nkeyword);
printf("No. of relational operators: %d\n",nrelop);
printf("No. of special characters: %d\n",nsplchar);
printf("No. of lowercase: %d\n",nlower);
printf("No. of uppercase: %d\n",nupper);
return 0;
}

%{
int *count[10];
int flag = 0 ;
%}
%%
[0-9]* {
int i=0;
for(i=0;i<yyleng;i++)
{
switch(yytext[i])
{
case 0: count[0]++;
case 1: count[1]++;
case 2: count[2]++;
case 3: count[3]++;
case 4: count[4]++;
case 5: count[5]++;
case 6: count[6]++;
case 7: count[7]++;
case 8: count[8]++;
case 9: count[9]++;
}
}
for(i=0;i<10;i++)
{
if(flag>1)
printf("Not valid string");
if(count[i]>1)
break;
if(count[i]==1)
flag++;
}
if(flag==0 || flag==1)
printf("Matched string: %s", yytext);
}
%%
int main()
{
yylex();
return 0;
}



